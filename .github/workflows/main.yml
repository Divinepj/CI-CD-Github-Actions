name: Node.js CI with Docker Build, Test, and Push

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test-and-deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18, 20]  # Specify Node.js versions to test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache Node Modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node.js and npm
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install
      
      # Run ESLint
      - name: Run Linter
        run: npx eslint .
      # 'npx eslint .' runs the ESLint tool on all the files in your repository.
      # ESLint is a static code analysis tool used to identify problematic patterns in JavaScript code.
    
      # Set executable permissions for Jest (if needed)
      - name: Set executable permissions for Jest
        run: chmod +x node_modules/.bin/jest

      # Run tests with Jest
      - name: Run tests with Jest
        run: npm run test

      # Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t adebayo2007/devops:${{ github.sha }} .
          docker tag adebayo2007/devops:${{ github.sha }} adebayo2007/devops:latest

      # Log in to Docker Hub using access token from GitHub secret
      - name: Log in to Docker Hub
        run: echo "${{ secrets.CALCULATOR }}" | docker login -u adebayo2007 --password-stdin

      # Push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker push adebayo2007/devops:${{ github.sha }}
          docker push adebayo2007/devops:latest

  bump-version-and-tag:
    name: Bump version and tag
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Bump version and push tag
        uses: anothrNick/github-tag-action@1.26.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: patch
        # This action automatically increments the patch version and tags the commit.
        # 'DEFAULT_BUMP' specifies the type of version bump (major, minor, patch).

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
    
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
        # This step creates a new release in GitHub using the tag name.


  deploy-to-aws:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
              
    steps:
        - name: Checkout code
          uses: actions/checkout@v2
              
        - name: Set up AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-west-2
      # Configures AWS credentials from GitHub secrets.
              
        - name: Deploy to AWS
          run: |
            # Add your deployment script here.
            # For example, using AWS CLI commands to deploy.